/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package driver;
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import java.util.regex.Pattern;

/**
 *
 * @author M Umair Bhatti
 */
public class BMI extends javax.swing.JFrame {

    /**
     * Creates new form BMI
     */
    public BMI() {
        initComponents();
        
        getContentPane().setBackground(Color.YELLOW);      /* sets the Frame Color */
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ageTxtField = new javax.swing.JTextField();
        hTxtField1 = new javax.swing.JTextField();
        wTxtField1 = new javax.swing.JTextField();
        genderComboBox = new javax.swing.JComboBox<>();
        heightComboBox = new javax.swing.JComboBox<>();
        weightComboBox = new javax.swing.JComboBox<>();
        hTxtField2 = new javax.swing.JTextField();
        calButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bmiValue = new javax.swing.JLabel();
        iwValue = new javax.swing.JLabel();
        fatValue = new javax.swing.JLabel();
        wTxtField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        classificationLabel = new javax.swing.JLabel();
        suggestionLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        jTextField1.setBackground(new java.awt.Color(0, 204, 0));
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setText("BMI Calculator");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 51, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 0));
        jLabel2.setText("BMI");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Calculator");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel10))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("AGE");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("HEIGHT");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("WEIGHT");

        ageTxtField.setBackground(new java.awt.Color(255, 255, 0));
        ageTxtField.setName(""); // NOI18N
        ageTxtField.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        ageTxtField.setSelectionColor(new java.awt.Color(0, 0, 0));
        ageTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageTxtFieldActionPerformed(evt);
            }
        });
        ageTxtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ageTxtFieldKeyTyped(evt);
            }
        });

        hTxtField1.setBackground(new java.awt.Color(255, 255, 0));
        hTxtField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hTxtField1ActionPerformed(evt);
            }
        });
        hTxtField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hTxtField1KeyTyped(evt);
            }
        });

        wTxtField1.setBackground(new java.awt.Color(255, 255, 0));
        wTxtField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                wTxtField1KeyTyped(evt);
            }
        });

        genderComboBox.setBackground(new java.awt.Color(0, 51, 255));
        genderComboBox.setForeground(new java.awt.Color(255, 255, 255));
        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Male", "Female" }));
        genderComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                genderComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        genderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderComboBoxActionPerformed(evt);
            }
        });

        heightComboBox.setBackground(new java.awt.Color(0, 51, 255));
        heightComboBox.setForeground(new java.awt.Color(255, 255, 255));
        heightComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "CM", "FT + IN" }));
        heightComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                heightComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        heightComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightComboBoxActionPerformed(evt);
            }
        });

        weightComboBox.setBackground(new java.awt.Color(0, 0, 255));
        weightComboBox.setForeground(new java.awt.Color(255, 255, 255));
        weightComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "KG", "LB", "ST + LB" }));
        weightComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightComboBoxActionPerformed(evt);
            }
        });

        hTxtField2.setBackground(new java.awt.Color(255, 255, 0));
        hTxtField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hTxtField2ActionPerformed(evt);
            }
        });
        hTxtField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hTxtField2KeyTyped(evt);
            }
        });

        calButton.setBackground(new java.awt.Color(0, 51, 255));
        calButton.setForeground(new java.awt.Color(255, 255, 255));
        calButton.setText("Calculate");
        calButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("BMI:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("IDEAL WEIGHT:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("FAT:");

        bmiValue.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bmiValue.setForeground(new java.awt.Color(0, 51, 204));
        bmiValue.setText("bmiValue");

        iwValue.setForeground(new java.awt.Color(0, 0, 204));
        iwValue.setText("iwValue");

        fatValue.setForeground(new java.awt.Color(0, 0, 204));
        fatValue.setText("fatValue");

        wTxtField2.setBackground(new java.awt.Color(255, 255, 0));
        wTxtField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                wTxtField2KeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Classification:");

        classificationLabel.setForeground(new java.awt.Color(0, 0, 204));
        classificationLabel.setText("classification result here");

        suggestionLabel.setForeground(new java.awt.Color(255, 0, 0));
        suggestionLabel.setText("Suggestion here");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("BMI");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(calButton)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bmiValue)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(ageTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                            .addComponent(wTxtField1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(hTxtField1, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(hTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(wTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(38, 38, 38)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(heightComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(weightComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(genderComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(suggestionLabel)))
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(classificationLabel)
                                    .addComponent(fatValue)
                                    .addComponent(iwValue))))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ageTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(heightComboBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(wTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(wTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(weightComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addComponent(calButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(bmiValue, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(suggestionLabel)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(iwValue))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(fatValue))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(classificationLabel))
                .addGap(58, 58, 58))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void hTxtField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hTxtField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hTxtField1ActionPerformed
    
    /**
     * sets the Value of text fields after selection from GenderComboBox
     * @param evt 
     */
    private void genderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderComboBoxActionPerformed
        refreshFields_Gender();
    }//GEN-LAST:event_genderComboBoxActionPerformed

    /**
     * sets the Visibility and Value of text fields after selection from WeightComboBox
     * @param evt 
     */
    private void weightComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightComboBoxActionPerformed
        refreshFields_Weight();
        updateWeightState();
    }//GEN-LAST:event_weightComboBoxActionPerformed
    
    /**
     * sets the Visibility and Value of text fields after selection from HeightComboBox
     * @param evt 
     */
    private void heightComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightComboBoxActionPerformed
        refreshFields_Height();
        updateHeightState();
    }//GEN-LAST:event_heightComboBoxActionPerformed

    private void genderComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_genderComboBoxPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_genderComboBoxPopupMenuWillBecomeInvisible

    private void heightComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_heightComboBoxPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        
    }//GEN-LAST:event_heightComboBoxPopupMenuWillBecomeInvisible

    private void hTxtField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hTxtField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hTxtField2ActionPerformed
 
    /**
     * Checking the validation of the fields
     * Calculates the different required calculations
     * @param evt 
     */    
    private void calButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calButtonActionPerformed
        if ((validateFields() == true)){
             double temp = calculateBMI();                         /* calls the funct. for calculating BMI value */
             bmiValue.setText(" "+temp);
             String fat = String.valueOf(calculateFat());      
             fatValue.setText(fat+"%");                            /* prints the Fat */
             String strIBW = Double.toString(calculateIBW());
             iwValue.setText(strIBW);                                 /* prints the Ideal Body Weight */
             classificationBMI();                                  /* prints the BMI Classification */
             suggest();                                            /* prints the Suggestion */
        }else{
             JOptionPane.showMessageDialog(null, "Check the missing detial. (Category / Entry)");
        }   
    }//GEN-LAST:event_calButtonActionPerformed

    /**
     * Limits the age entry to only integers.
     * @param evt 
     */
    private void ageTxtFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageTxtFieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || c==KeyEvent.VK_DELETE)){
           evt.consume();
           JOptionPane.showMessageDialog(null, "Enter Only Integers!");
        }
    }//GEN-LAST:event_ageTxtFieldKeyTyped

    /**
     * Limits the height measurements to only Integers
     * @param evt 
     */
    private void hTxtField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hTxtField1KeyTyped
        char c = evt.getKeyChar();
        boolean check;
        if (check = heightComboBox.getSelectedItem().equals("FT + IN")){             /* Limits to integers */
            if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || c==KeyEvent.VK_DELETE)){
               evt.consume();
               JOptionPane.showMessageDialog(null, "Enter Only Integers!");
            }
        }else{
            if(Character.isLetter(c) && !evt.isAltDown()){                           /* Limits to Numerics */
               evt.consume();
               JOptionPane.showMessageDialog(null, "Enter Only Numerics!");
            }
        }
    }//GEN-LAST:event_hTxtField1KeyTyped

    /**
     * Limits the height measurements to Only integers
     * @param evt 
     */
    private void hTxtField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hTxtField2KeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || c==KeyEvent.VK_DELETE)){
           evt.consume();
           JOptionPane.showMessageDialog(null, "Enter Only Integers!");
        }
    }//GEN-LAST:event_hTxtField2KeyTyped

    /**
     * Limits the weight measurements to FPU and Integers
     * @param evt 
     */
    private void wTxtField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wTxtField1KeyTyped
        char c = evt.getKeyChar();
        boolean check;
        if (check = weightComboBox.getSelectedItem().equals("ST + LB")){                /* Limits to Integers */
            if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || c==KeyEvent.VK_DELETE)){
               evt.consume();
               JOptionPane.showMessageDialog(null, "Enter Only Integers!");       
            }
        }else{
            if(Character.isLetter(c) && !evt.isAltDown()){                              /* Limits to Numerics */
               evt.consume();
               JOptionPane.showMessageDialog(null, "Enter Only Numerics!");
            }
        }
    }//GEN-LAST:event_wTxtField1KeyTyped

    /**
     * Limits the weight measurements to Only Numerics
     * @param evt 
     */
    private void wTxtField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wTxtField2KeyTyped
        char c = evt.getKeyChar();
        if(Character.isLetter(c) && !evt.isAltDown()){
           evt.consume();
           JOptionPane.showMessageDialog(null, "Enter Only Numerics!");
        }
    }//GEN-LAST:event_wTxtField2KeyTyped

    private void ageTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageTxtFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BMI().setVisible(true);
            }
        });
    }
    
    
    /**
     * This method is called for updating the value of HeightTextFields 
     */
    protected void updateHeightState() {
        boolean enabled;
        if (enabled = heightComboBox.getSelectedItem().equals("FT + IN")) {
            hTxtField2.setEnabled(enabled );
        } else {
            hTxtField2.setEnabled(false);
        }
    }
    
    /**
     * This method is called for updating the value of WeightTextFields
     */    
    protected void updateWeightState() {
        boolean enabled;
        if (enabled = weightComboBox.getSelectedItem().equals("ST + LB") ) {
            wTxtField2.setEnabled(true );
        } else {
            wTxtField2.setEnabled(false);
        }
    }
    
    /**
     * This method is called for calculating BMI value
     * @return  
     */
    protected double calculateBMI() {
        double cm = toCM();
        double kg = toKG();
        double m = cm/100;
        double tempBMI;    
        tempBMI = kg/(m*m);
        return tempBMI;
        }
        
    /**
     * This method is called for calculating Ideal Body Weight
     * @return 
     */    
    protected double calculateIBW() {
        double cm = toCM();
        double m = cm/100; 
        double tempIW;
        tempIW = (22*m*m);
        return tempIW;
    }
    
    /**
     * This method is for converting all other units to CM units
     * @return 
     */
    protected double toCM() {
        int feet,inches;
        double tempcm;
        boolean check;
        if (check = heightComboBox.getSelectedItem().equals("FT + IN")) {
            feet = Integer.parseInt(hTxtField1.getText());
            inches = Integer.parseInt(hTxtField2.getText());
            tempcm = ((feet*12)+inches)*2.54;
            return tempcm;
        } else {
            if (isAllNums(hTxtField1.getText()) == true) {
                tempcm = Double.parseDouble(hTxtField1.getText());
                return tempcm;
            } else {
                JOptionPane.showMessageDialog(null, "Enter only floating point values!");
                return 0.0;
            }
        } 
    }
            
    /**
     * This method is for converting all other units to KG units
     * @return 
     */    
    protected double toKG () {
        int st;
        double tempkg,lb;
        boolean check;
        if (check = weightComboBox.getSelectedItem().equals("ST + LB")) {
            if(isAllNums(wTxtField2.getText()) == true) {
               st = Integer.parseInt(wTxtField1.getText());
               lb = Double.parseDouble(wTxtField2.getText());
               tempkg = (st*6.35029318)+(lb*0.45359237);
               return tempkg;
            } else {
               JOptionPane.showMessageDialog(null, "Enter only floating point values!");
               return 0.0;
            }
           
        } else if (check = weightComboBox.getSelectedItem().equals("LB")) {
            if (isAllNums(wTxtField1.getText()) == true) {
                lb = Double.parseDouble(wTxtField1.getText());
                tempkg = (1/2.2)*lb;
                return tempkg;
            } else {
                JOptionPane.showMessageDialog(null, "Enter only floating point values!");
                return 0.0;
            }
        } else {
            if (isAllNums(wTxtField1.getText()) == true) {
                tempkg = Double.parseDouble(wTxtField1.getText());
                return tempkg;
            } else {
                JOptionPane.showMessageDialog(null, "Enter only floating point values!");
                return 0.0;
            }    
        }
    }
    
    /**
     * This method is for printing Classification details of BMI
     */
    protected void classificationBMI() {
        double temp = calculateBMI();
        String tempcls = "Out of Range";
        if (temp < 16) {
            tempcls = "Very Severely Underweight";
        } else if (temp >= 16 && temp <17 ) {
            tempcls = "Severely Underweight";
        } else if (temp >= 17 && temp <18.5 ) {
            tempcls = "Underweight";
        } else if (temp >= 18.5 && temp <25 ) {
            tempcls = "Normal";
        } else if (temp >= 25 && temp <30 ) {
            tempcls = "Overweight";
        } else if (temp >= 30 && temp <35 ) {
            tempcls = "Obese Class 1";
        } else if (temp >= 35 && temp <=40 ) {
            tempcls = "Obese Class 2";
        } else if (temp > 40 ) {
            tempcls = "Obese Class 3";
        }
           
        classificationLabel.setText(tempcls);
    } 
        
    /**
     * This method is for printing Warning Notification related BMI
     */    
    protected void suggest() {
        double temp = calculateBMI();
        String tempsgs = "Do what you want";
        if (temp < 18.6) {
            tempsgs = "Time to grab a bite!";
        } else if (temp >= 18.6 && temp <=26 ) {
            tempsgs = "Great Shape!";
        } else if (temp > 26 ) {
            tempsgs = "Time for a Run!";
        }
        
        suggestionLabel.setText(tempsgs);
    }
    
    /**
     * This method validates whether any,
     * Any Category is missing to be selection &
     * Any Field is missing to be filled or wrongly filled
     * @return 
     */    
    protected boolean validateFields() {
        boolean check;
        if ((check = genderComboBox.getSelectedItem().equals("Male")) 
                || (check = genderComboBox.getSelectedItem().equals("Female"))) {
             if (check = heightComboBox.getSelectedItem().equals("FT + IN")) {
                 if((check = weightComboBox.getSelectedItem().equals("ST + LB"))) {
                     if (ageTxtField.getText().equals("") || hTxtField1.getText().equals("") 
                             || hTxtField2.getText().equals("") || wTxtField1.getText().equals("") 
                             || wTxtField2.getText().equals("")) {
                         JOptionPane.showMessageDialog(null, "Enter All Credentials!!");
                         return false;
                     } else {
                         return true;
                     }
                 } else if ((check = weightComboBox.getSelectedItem().equals("KG")) 
                                 || (check = weightComboBox.getSelectedItem().equals("LB"))) {
                     if (ageTxtField.getText().equals("") || hTxtField1.getText().equals("") 
                             || hTxtField2.getText().equals("") || wTxtField1.getText().equals("")) {
                         JOptionPane.showMessageDialog(null, "Enter All Credentials!!");
                         return false;
                     } else {
                         return true;
                     }
                 } else {
                     return false;
                 }
             } else if ((check = heightComboBox.getSelectedItem().equals("CM"))) {
                 if((check = weightComboBox.getSelectedItem().equals("ST + LB"))) {
                     if (ageTxtField.getText().equals("") || hTxtField1.getText().equals("")
                             || wTxtField1.getText().equals("") || wTxtField2.getText().equals("")) {
                         JOptionPane.showMessageDialog(null, "Enter All Credentials!!");
                         return false;
                     } else {
                          return true;
                     }
                 } else if ((check = weightComboBox.getSelectedItem().equals("KG")) 
                                 || (check = weightComboBox.getSelectedItem().equals("LB"))) {
                     if (ageTxtField.getText().equals("") || hTxtField1.getText().equals("")
                             || wTxtField1.getText().equals("")) {
                         JOptionPane.showMessageDialog(null, "Enter All Credentials!!");
                         return false;
                     } else {
                         return true;
                     }
                 }
                  return false;
             }
             return false;
        }
         return false;
    }
        
    /**
     * This method is for validating Floating Point Numbers
     * @param str
     * @return 
     */    
    protected boolean isAllNums(String str) {   
        String uncheckedStr = str;
        if (Pattern.matches("^[. 0-9]+$", uncheckedStr)) {
            return true;
        } else {
            return false;
        }
    }
          
    /**
     * This method is for calculating Fat percentage
     * @return 
     */     
    protected double calculateFat() {
        int age = Integer.parseInt(ageTxtField.getText());
        double bmi = calculateBMI();
        String sex;
        boolean check;
        double fat = 0.0;
        if (check = genderComboBox.getSelectedItem().equals("Male")) {
            fat =(1.20 * bmi) + (0.23 * age) - (10.8 * 1) - 5.4;  
        } else {
            fat =(1.20 * bmi) + (0.23 * age) - (10.8 * 0) - 5.4;
        }
        
        return fat;
    }
          
    /**
     * This method is for clearing Gender Text Fields whenever Combo Box Value
     * is selected
     */      
    protected void refreshFields_Gender() {
        ageTxtField.setText("");              
    }
    
    /**
     * This method is for clearing Gender Text Fields whenever Combo Box Value
     * is selected
     */
    protected void refreshFields_Height() {
        hTxtField1.setText("");
        hTxtField2.setText("");
    }
    
    /**
     * This method is for clearing Gender Text Fields whenever Combo Box Value
     * is selected
     */
    protected void refreshFields_Weight() {
        wTxtField1.setText("");
        wTxtField2.setText("");
    }

        
     
//------------------------------------------------------------------//----------------------------------------------

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageTxtField;
    private javax.swing.JLabel bmiValue;
    private javax.swing.JButton calButton;
    private javax.swing.JLabel classificationLabel;
    private javax.swing.JLabel fatValue;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JTextField hTxtField1;
    private javax.swing.JTextField hTxtField2;
    private javax.swing.JComboBox<String> heightComboBox;
    private javax.swing.JLabel iwValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel suggestionLabel;
    private javax.swing.JTextField wTxtField1;
    private javax.swing.JTextField wTxtField2;
    private javax.swing.JComboBox<String> weightComboBox;
    // End of variables declaration//GEN-END:variables
}
